{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","process","Greeting","props","isWeather","console","log","className","App","useState","query","setQuery","weather","setWeather","quote","setQuote","listOfEvents","setlistOfEvents","useEffect","fetch","then","response","json","item","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","catch","err","method","headers","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","map","event","class","src","thumb_url_large","alt","id","href","event_url","rel","eventname_raw","venue","full_address","start_time_display","end_time_display","tickets","ticket_url","text","author","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sLAGMA,G,KACAC,oCADAD,EAEA,2CAGN,SAASE,EAASC,GACjB,IAAMC,EAAYD,EAAMC,UAExB,OADAC,QAAQC,IAAIF,GACRA,EACI,yBAAKG,UAAU,YAAf,+BAEA,yBAAKA,UAAU,YAAf,YA+JMC,MAlIf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGYJ,mBAAS,IAHrB,mBAGPK,EAHO,KAGAC,EAHA,OAI0BN,mBAAS,IAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAkDd,OA5CAC,qBACC,SAACF,GACAG,MAAM,qDACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACNhB,QAAQC,IAAIe,GACZhB,QAAQC,IAAIe,EAASE,MACrBN,EAAgBI,EAASE,WAG5B,CAACP,IAmCD,yBAAKT,UAAkC,oBAAhBK,EAAQY,MAAuBZ,EAAQY,KAAKC,KAAO,GAAK,WAAsB,OACpG,8BACC,yBAAKlB,UAAU,cACd,2BACCmB,KAAK,OACLnB,UAAU,aACVoB,YAAY,sBACZC,SAAU,SAACC,GAAD,OAAOlB,EAASkB,EAAEC,OAAOC,QACnCA,MAAOrB,EACPsB,WAzCU,SAACC,GACC,UAAZA,EAAIC,MACPf,MAAM,GAAD,OAAInB,EAAJ,qBAAwBU,EAAxB,+BAAoDV,IACvDoB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACNhB,QAAQC,IAAIe,GACZR,EAAWQ,GACXV,EAAS,OAETwB,OAAM,SAACC,GACP/B,QAAQC,IAAI8B,MAGdjB,MAAM,kGAAmG,CACxGkB,OAAQ,MACRC,QAAS,CACR,kBAAmB,iEACnB,iBAAkBrC,wDAGlBmB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACNN,EAASM,GACThB,QAAQC,IAAIe,MAEZc,OAAM,SAACC,GACP/B,QAAQC,IAAI8B,WAkBW,oBAAhBxB,EAAQY,KACf,yBAAKjB,UAAU,aAEd,yBAAKA,UAAU,mBACd,yBAAKA,UAAU,gBACd,yBAAKA,UAAU,aACbK,EAAQ2B,KADV,KACkB3B,EAAQ4B,IAAIC,QAAS,KAEvC,yBAAKlC,UAAU,QAhGH,SAACmC,GACpB,IAgBIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAlBS,CACZ,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAMkBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA0EJE,CAAY,IAAIC,QAExC,yBAAK7C,UAAU,eACd,6BACA,yBAAKA,UAAU,QAAQ8C,KAAKC,MAAM1C,EAAQY,KAAKC,MAA/C,SACA,yBAAKlB,UAAU,WAAWK,EAAQA,QAAQ,GAAGY,QAI/C,yBAAKjB,UAAU,iBAAf,UAEA,yBAAKA,UAAU,cACbS,EAAauC,KAAI,SAACC,GAElB,OADAnD,QAAQC,IAAIkD,GAEX,yBAAKC,MAAM,cACV,yBAAKA,MAAM,eACT,IACD,yBAAKC,IAAKF,EAAMG,gBAAiBC,IAAI,MAAO,KAE7C,yBAAKH,MAAM,2BACV,uBAAGI,GAAG,cAAcC,KAAMN,EAAMO,UAAWjC,OAAO,SAASkC,IAAI,cAC9D,yBAAKzD,UAAU,iBACd,qCAAe,IACf,4BACEiD,EAAMS,cADR,IACuB,8BAEvB,6BACA,gCAAMT,EAAMU,MAAMC,cAClB,6BACA,uCACA,4BACEX,EAAMY,mBADR,MAC+BZ,EAAMa,kBAErC,6BACA,uBAAGP,KAAMN,EAAMc,QAAQC,WAAYzC,OAAO,SAASkC,IAAI,cACtD,2DAWR,yBAAKzD,UAAU,eAAf,IACGO,EAAM0D,KADT,OACkB,2BAAI1D,EAAM2D,UAI7B,kBAACvE,EAAD,CAAUE,UAAWQ,OC1JN8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlE,MAAK,SAAAmE,GACJA,EAAaC,gBAEdrD,OAAM,SAAAsD,GACLpF,QAAQoF,MAAMA,EAAMC,a","file":"static/js/main.f3ae5231.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst api = {\n\tkey: process.env.REACT_APP_WEATHER_API_KEY,\n\turl: 'https://api.openweathermap.org/data/2.5/',\n};\n\nfunction Greeting(props) {\n\tconst isWeather = props.isWeather;\n\tconsole.log(isWeather);\n\tif (isWeather) {\n\t\treturn <div className=\"error404\">Entered location not found!</div>;\n\t} else {\n\t\treturn <div className=\"error404\">Welcome!</div>;\n\t}\n}\n\nconst dateBuilder = (d) => {\n\tlet months = [\n\t\t'January',\n\t\t'February',\n\t\t'March',\n\t\t'April',\n\t\t'May',\n\t\t'June',\n\t\t'July',\n\t\t'August',\n\t\t'September',\n\t\t'October',\n\t\t'November',\n\t\t'December',\n\t];\n\tlet days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n\tlet day = days[d.getDay()];\n\tlet date = d.getDate();\n\tlet month = months[d.getMonth()];\n\tlet year = d.getFullYear();\n\n\treturn `${day} ${date} ${month} ${year}`;\n};\n\nfunction App() {\n\tconst [query, setQuery] = useState('');\n\tconst [weather, setWeather] = useState('');\n\tconst [quote, setQuote] = useState('');\n\tconst [listOfEvents, setlistOfEvents] = useState('');\n\n\tuseEffect(\n\t\t(listOfEvents) => {\n\t\t\tfetch('https://allevents.s3.amazonaws.com/tests/all.json')\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((response) => {\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t\tconsole.log(response.item);\n\t\t\t\t\tsetlistOfEvents(response.item);\n\t\t\t\t});\n\t\t},\n\t\t[listOfEvents]\n\t);\n\n\tconst search = (evt) => {\n\t\tif (evt.key === 'Enter') {\n\t\t\tfetch(`${api.url}weather?q=${query}&units=metric&APPID=${api.key}`)\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((response) => {\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t\tsetWeather(response);\n\t\t\t\t\tsetQuery('');\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t});\n\n\t\t\tfetch('https://quotes-inspirational-quotes-motivational-quotes.p.rapidapi.com/quote?token=ipworld.info', {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\t'x-rapidapi-host': 'quotes-inspirational-quotes-motivational-quotes.p.rapidapi.com',\n\t\t\t\t\t'x-rapidapi-key': process.env.REACT_APP_QUOTE_API_KEY,\n\t\t\t\t},\n\t\t\t})\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((response) => {\n\t\t\t\t\tsetQuote(response);\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={typeof weather.main != 'undefined' ? (weather.main.temp > 27 ? 'app-warm' : 'app') : 'app'}>\n\t\t\t<main>\n\t\t\t\t<div className=\"search-box\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"search-bar\"\n\t\t\t\t\t\tplaceholder=\"Search ðŸ”Ž\"\n\t\t\t\t\t\tonChange={(e) => setQuery(e.target.value)}\n\t\t\t\t\t\tvalue={query}\n\t\t\t\t\t\tonKeyPress={search}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{typeof weather.main != 'undefined' ? (\n\t\t\t\t\t<div className=\"main-item\">\n\t\t\t\t\t\t{/* Weather Information */}\n\t\t\t\t\t\t<div className=\"weather-content\">\n\t\t\t\t\t\t\t<div className=\"location-box\">\n\t\t\t\t\t\t\t\t<div className=\"location \">\n\t\t\t\t\t\t\t\t\t{weather.name}, {weather.sys.country}{' '}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"date\">{dateBuilder(new Date())}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"weather-box\">\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<div className=\"temp\">{Math.round(weather.main.temp)}Â°C</div>\n\t\t\t\t\t\t\t\t<div className=\"weather\">{weather.weather[0].main}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"event-heading\">Events</div>\n\t\t\t\t\t\t{/* List of Events  */}\n\t\t\t\t\t\t<div className=\"event-deck\">\n\t\t\t\t\t\t\t{listOfEvents.map((event) => {\n\t\t\t\t\t\t\t\tconsole.log(event);\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div class=\"event-card\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"event-image\">\n\t\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t\t<img src={event.thumb_url_large} alt=\" \" />{' '}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"about-event title-white\">\n\t\t\t\t\t\t\t\t\t\t\t<a id=\"event-links\" href={event.event_url} target=\"_blank\" rel=\"noreferrer\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"event-details\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h4>Event</h4>{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{event.eventname_raw} <br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>@{event.venue.full_address}</h5>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h4>Timings</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{event.start_time_display} - {event.end_time_display}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a href={event.tickets.ticket_url} target=\"_blank\" rel=\"noreferrer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4>Check for Tickets!</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Quote Of The Day  */}\n\t\t\t\t\t\t<div className=\"daily-quote\">\n\t\t\t\t\t\t\t\"{quote.text}\" - <i>{quote.author}</i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<Greeting isWeather={weather} />\n\t\t\t\t)}\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}